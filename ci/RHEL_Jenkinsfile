// ON HOLD: due for 2025-01
pipeline {
  agent {
    kubernetes {
      yamlFile "ci/agent_pod.yaml"
    }
  }

  options {
    timestamps()
    ansiColor("xterm")
  }

  parameters {
    string(name: "LATEST_DOCA_VERSION", defaultValue: "24.07-0.6.1.0", description: "The version of the DOCA sources to use")
  }

  environment {
    // NVCR_USERNAME = "\$oauthtoken"
    NVCR_DOCKER_REGISTRY = "nvcr.io/nvstaging/mellanox"
    DOCKER_IMAGE_NAME = "doca-driver"
  }

  stages {
    stage("Init") {
      steps {
        container("dind") {
          sh("sudo apk add jq skopeo")
          sh("until nc -vz localhost 2375; do sleep 3; done")
        }
      }
    }

    stage("Precompile build matrices") {
      matrix {
        axes {
          axis {
            name "ARCHITECTURE"
            values "linux/amd64", "linux/arm64"
          }
          axis {
            name "OS_VERSION"
            values "9.4", "9.3", "9.2", "8.10", "8.9", "8.8", "4.16"
          }
          axis {
            name "OS"
            values "rhel", "rhcos"
          }
        }
        excludes {
          exclude {
            axis {
              name "OS"
              values "rhel"
            }
            axis {
              name "OS_VERSION"
              values "4.16"
            }
          }
          exclude {
            axis {
              name "OS"
              values "rhcos"
            }
            axis {
              name "OS_VERSION"
            values "9.4", "9.3", "9.2", "8.10", "8.9", "8.8"
            }
          }
          exclude {
            axis {
              name "OS"
              values "rhel"
            }
            axis {
              name "ARCHITECTURE"
              values "linux/arm64"
            }
          }
        }
        environment {
          OS = "$OS"  // workaround to access matrix values in `script{}` scope
          RH_MAJOR_VERSION_TO_USE_FOR_LATEST_KERNEL_LOOKUPS = "9"
          RH_DOCKER_REGISTRY = "registry.redhat.io"
        }
        stages {

          stage("Init") {
            steps {
              container("dind") {
                script {
                  // Fetch latest Kernel version
                  if (OS == "rhel") {
                    majorVersion=OS_VERSION.tokenize(".")[0]
                  } else if (OS == "rhcos") {
                    majorVersion=RH_MAJOR_VERSION_TO_USE_FOR_LATEST_KERNEL_LOOKUPS
                  }
                  env.LATEST_KERNEL_VERSION = sh(script: "docker run --rm redhat/ubi$majorVersion:latest yum repoquery | grep kernel-headers | cut -d ':' -f 2", returnStdout: true).trim()

                  // Docker login
                  withCredentials([usernamePassword(credentialsId: "redhat-username-and-password", usernameVariable: "RH_USERNAME", passwordVariable: "RH_PASSWORD")]) {
                    sh("echo '$RH_PASSWORD' | docker login -u '$RH_USERNAME' --password-stdin $RH_DOCKER_REGISTRY")  // required during build
                  }
                  withCredentials([usernamePassword(credentialsId: "nvcr-username-and-token", usernameVariable: "NVCR_USERNAME", passwordVariable: "NVCR_TOKEN")]) {
                    sh("echo '$NVCR_TOKEN' | docker login -u '$NVCR_USERNAME' --password-stdin $NVCR_DOCKER_REGISTRY")
                  }

                  // Check if precompiled DOCA for kernel version already exists
                  ARCH = ARCHITECTURE.tokenize("/")[1]
                  env.PRECOMPILED_VERSION_EXISTS = sh(script: """
                    skopeo list-tags docker://$NVCR_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME | jq '.Tags[]' -r | \
                      grep $LATEST_DOCA_VERSION | \
                      grep $OS$OS_VERSION-$ARCH
                  """, returnStatus: true)

                  // Determine Docker tag
                  env.DOCKER_TAG = "$params.LATEST_DOCA_VERSION-$LATEST_KERNEL_VERSION-$OS$OS_VERSION"  // example: 24.07-0.6.1.0-5.14.0-427.37.1.el9_4.x86_64-rhel9.4
                }
              }
            }
          }

          stage("Build and push") {
            when {
              expression { env.PRECOMPILED_VERSION_EXISTS != 0 }
            }
            steps {
              container("kaniko") {
                sh("""
                  /kaniko/executor version
                """)
              }
            }
          }

          stage("Manifest creation") {
            when {
              expression { env.PRECOMPILED_VERSION_EXISTS != 0 }
            }
            steps {
              container("dind") {
                sh("""
                  docker --version
                """)
              }
            }
          }

        }
      }
    }
  }
}

